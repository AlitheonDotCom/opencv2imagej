#!/usr/bin/env ruby
#
# Converts a YAML file generated by OpenCV's FileStorage interface into a format that can be imported by ImageJ.
# OpenCV YAML file format: http://docs.opencv.org/2.4/modules/core/doc/xml_yaml_persistence.html#filestorage
# ImageJ Text Image file format: https://imagej.nih.gov/ij/docs/guide/146-26.html#fig:TextImages
#

require 'yaml'

if ARGV.size == 0
  puts 'Usage: ruby ./opencv2imagej.rb yaml_file [image_key]'
  puts 'yaml_file: path to an OpenCV image in yaml format'
  puts 'image_key: the name of the serialized image, default is "img"'
  exit
end

image_key = ARGV[1] || 'img'
infile = ARGV[0]
outfile = infile.chomp(File.extname(infile)) + '.txt'

# Ruby's yaml parser can't parse the YAML 1.0 directive "%YAML:1.0"
# So we can't just use YAML.load_file(infile)
# http://stackoverflow.com/questions/17560350/cannot-parse-yaml1-0-in-ruby
contents = IO.read(infile)
contents.gsub!(/%/, '#%')
contents = YAML.load(contents)

rows = contents[image_key]['rows']
cols = contents[image_key]['cols']
data = contents[image_key]['data']

File.open(outfile, 'w') do |file|
  for r in 0..(rows -1)
    for c in 0..(cols -1)
      file.write(data[r * cols + c])
      file.write("\t") unless c == (cols - 1)
    end
    file.write("\n")
  end
end
